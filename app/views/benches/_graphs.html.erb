<script>Chartkick.charts = new Object()</script>
<div id=gameContent>
  <h3 class="text-center" id="gameTitle"><%= benches_game.game.name %></h3>
  <% if @benchmark.id > 44 %>
    <div id='fps_chart'></div>
    <div id='frametime_chart'></div>
  <% else %>
    <%= line_chart full_fps_benches_game_path(benches_game),
      points: false, curve: false, download: true, title: 'FPS', xtitle: "Time", ytitle: "FPS",
      id: 'fps', height: '400px', min: benches_game.min %>
    <%= line_chart full_frametime_benches_game_path(benches_game),
        points: false, curve: false, download: true, title: 'Frame Time', xtitle: "Time", ytitle: "Ms",
        id: 'frametime',height: '400px', min: 1000 / benches_game.max %>
    <% if !benches_game.inputs.where(gpu: nil).any? && benches_game.avgcpu != nil%>
      <%= column_chart avgcpu_benches_game_path(benches_game), id: 'cpu', max: 100, colors: Bench::TWENTY, height: '400px', library: { plotOptions: { column: { colorByPoint: true }}} %>
    <% end %>
  <% end %>

  <%= bar_chart bar_benches_game_path(benches_game), colors: ["#e64b3b", "#3398dc", "#3cb44b"], title: 'Min/Avg/Max', ytitle: "FPS", id: 'bar',
    library: {subtitle: {useHTML: true, text: '<i class="fas fa-arrow-right" style="color: #00bc8c"></i> More is better'}}, height: '500px', stacked: false %>


  <div id="gameStats">
    <%= render partial: 'stats', locals: {types: benches_game.types, benches_game_id: benches_game.id} %>
  </div>
</div>

<script>
  var num = 0; 
  var xAxisBoolean = false;
  function addCallback(name, chart){
    switch(name){
      case 'fps':
        subtitleText = '<i class="fas fa-arrow-up" style="color: #00bc8c"></i> More is better';
      break
      case 'frametime':
        subtitleText = '<i class="fas fa-arrow-down" style="color: #00bc8c"></i> Less is better'
      break
      case 'cpu':
        subtitleText = "Average CPU Load";
      break
      case 'bar':
        subtitleText = '<i class="fas fa-arrow-right" style="color: #00bc8c"></i> More is better'
        xAxisBoolean = true;
      break
    }
    var newOptions = {
      library: {
        plotOptions: {
            column: {
                colorByPoint: true
            },
        },
        subtitle: {
          useHTML: true,
          text: subtitleText
        },
        xAxis: {
          labels: {
            enabled: xAxisBoolean
          }
        },
        tooltip: {
          formatter: function() {
              var s = '<b>'+ this.x +'</b>';

              $.each(this.points, function(i, point) {
                  s += '<br/><span style="color:' + point.color + '">\u25CF</span> ' + point.series.name + ': ' + Math.round(point.y * 10) / 10;
              });

              return s;
          },
          shared: true
        },
        chart: {
          events: {
            load: function () {
              // num++
              // if (num == (Object.keys(Chartkick.charts).length * 2)){
              //   $('#loadingSpinner').hide()
              //   $('#gameContent').removeClass('d-none')
              //   $('#gameContent').addClass('animated fadeIn')
              // }
            }
          }
        }
      }
    }
  var mergedOptions = jQuery.extend(chart.options,newOptions)
  chart.setOptions(mergedOptions);
  } 
  // $.each(Chartkick.charts, function(name, chart) {
  //   addCallback(name, chart);
  // })

</script>

<script>
function get_layout_fps(){
  var elmnt = document.getElementById("main-container");
  var width = elmnt.clientWidth;
  console.log(width);
  var layout = {
    margin: {
      r: 50,
      t: 40,
      l: 50,
    },
    modebar: {
      orientation: 'h',
      bgcolor: "222",
      color: 'white',
      // x: -0.5,
    },
    title: {
      text:'FPS',
      xanchor: 'right',
      // x: 0,
    },
    hovermode: false,
    width: width.toString(),
    showlegend: true,
    responsive: true,
    legend: {
      xanchor: 'center',
      x: 0.5,
      y: -0.2,
      yanchor: 'bottom',
      orientation: "h",
    },
    font: {
      family: 'lato, sans-serif',
      size: 18,
      color: '#E0E0E3'
    },
    plot_bgcolor: "rgba(1,1,1,0)",
    paper_bgcolor: "rgba(1,1,1,0)",
    xaxis: {
      showgrid: false,
      autotick: true,
      ticks: '',
      showticklabels: false,
    },
    yaxis: {
      range: [<%= benches_game.min %>, <%= benches_game.max %>],
      tickfont: {
        color: "#E0E0E3",
      },
      showgrid: true,
      zerolinecolor:  '#707073',
      zeroline: true,
      gridcolor: '#707073',
    },
  }
  return layout
}

function get_layout_frametime(){
  var elmnt = document.getElementById("main-container");
  var width = elmnt.clientWidth;
  console.log(width);
  var layout = {
    margin: {
      r: 50,
      t: 40,
      l: 50,
    },
    modebar: {
      orientation: 'h',
      bgcolor: "222",
      color: 'white',
      // x: -0.5,
    },
    title: {
      text:'Frametime',
      xanchor: 'center',
      // x: 0,
    },
    hovermode: false,
    width: width.toString(),
    showlegend: true,
    responsive: true,
    legend: {
      xanchor: 'center',
      x: 0.5,
      y: -0.2,
      yanchor: 'bottom',
      orientation: "h",
    },
    font: {
      family: 'lato, sans-serif',
      size: 18,
      color: '#E0E0E3'
    },
    plot_bgcolor: "rgba(1,1,1,0)",
    paper_bgcolor: "rgba(1,1,1,0)",
    xaxis: {
      showgrid: false,
      autotick: true,
      ticks: '',
      showticklabels: false,
    },
    yaxis: {
      // range: [<%= 1000 / benches_game.max %>, <%= 1000 / benches_game.min %>],
      tickfont: {
        color: "#E0E0E3",
      },
      showgrid: true,
      zerolinecolor:  '#707073',
      zeroline: true,
      gridcolor: '#707073',
    },
  }
  return layout
}

function fps_chart(){
  var data = []
  <% @benchmark.types.order(name: :desc).each do |type| %>
    window["trace-<%= type.id %>"] = {
      x: <%= type.inputs.where(bench: @benchmark).order(pos: :asc).pluck(:pos) %>,
      y: <%=  type.inputs.where(bench: @benchmark).order(pos: :asc).pluck(:fps) %>,
      mode: 'lines',
      line: {
        color: '<%= type.inputs.where(bench: @benchmark).last.color %>',
        width: 2
      },
      type: 'scatter',
      name: "<%= type.name %>",
    },
  <% end %>
  <% @benchmark.types.order(name: :asc).each do |type| %>
    data.push(window["trace-<%= type.id %>"]);
  <% end %>

  // data = []
  Plotly.newPlot('fps_chart', data, get_layout_fps());
}

function frametime_chart(){
  var data = []
  <% @benchmark.types.order(name: :desc).each do |type| %>
    window["trace-<%= type.id %>"] = {
      x: <%= type.inputs.where(bench: @benchmark).order(pos: :asc).pluck(:pos) %>,
      y: <%=  type.inputs.where(bench: @benchmark).order(pos: :asc).pluck(:frametime) %>,
      mode: 'lines',
      line: {
        color: '<%= type.inputs.where(bench: @benchmark).last.color %>',
        width: 2
      },
      type: 'scatter',
      name: "<%= type.name %>",
    },
  <% end %>
  <% @benchmark.types.order(name: :asc).each do |type| %>
    data.push(window["trace-<%= type.id %>"]);
  <% end %>

  // data = []
  Plotly.newPlot('frametime_chart', data, get_layout_frametime());
}
function resize_charts(){
  Plotly.relayout('fps_chart', get_layout_fps())
  Plotly.relayout('frametime_chart', get_layout_frametime())
}
$( document ).ready(function() {
  fps_chart();
  frametime_chart();
  window.addEventListener('resize', resize_charts);
})
// })
</script>