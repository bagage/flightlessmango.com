<script type="text/javascript">
Chart.defaults.global.defaultFontColor = "white";
Chart.defaults.global.legend.display = false;
Chart.defaults.global.defaultFontStyle = 'bold';
Chart.defaults.global.defaultFontSize = 12;
var addPointInterval
var tickAmount = 20
<% benches_game_id = BenchesGame.where(game_id: @benchmark.games.order(name: :asc).first.id, bench_id: @benchmark.id).last.id %>
function startFps(){
  $.getJSON( "/benches_games/" + id + "/full_fps", function( data ) {
    var json
    var count = 0;
    json = data
    $.each(fpschart.data.datasets, function(i, val){
      json[i].data.sort(function(a, b) {
          return a[0] - b[0];
      });  
    })
    fpschart.options.scales.xAxes[0].ticks.min = 25
    fpschart.options.scales.xAxes[0].ticks.max = 25
    function addPoint(){
      // var countArray = []
      // if (count % 25 == 0){
      //   $.each(json, function(i,jsondata){
      //     $.each(jsondata.data.slice(count, count + tickAmount), function(x,val) {
      //       countArray.push(val[1])
      //     })        
      //   })
      //   var max = (Math.round(Math.max.apply(Math, countArray) / 10) * 10) + 10;
      //   var min = (Math.round(Math.min.apply(Math, countArray) / 10) * 10) - 10;
      //   fpschart.options.scales.yAxes[0].ticks.max = max
      //   fpschart.options.scales.yAxes[1].ticks.max = max
      //   fpschart.options.scales.yAxes[0].ticks.min = min
      //   fpschart.options.scales.yAxes[1].ticks.min = min
      // }
      fpschart.data.labels[count] = count
      $.each(fpschart.data.datasets, function(i, val){
        fpschart.data.datasets[i].data[count] = parseFloat(json[i].data[count][1])
      })
      var warningColor = false;
      var dangerColor = false;
      
      if ((count / json[0].data.length) * 100 > 50 && !warningColor){
        $('.progress #dx11').addClass('bg-warning')
        $('.progress #dx11').removeClass('bg-danger')
        warningColor = true;
      }
        
      if ((count / json[0].data.length) * 100 > 80 && !dangerColor){
        $('.progress #dx11').removeClass('bg-warning')
        $('.progress #dx11').addClass('bg-success')
        dangerColor = true ;
      }

      if (count == json[0].data.length - 1)
        $('.progress #dx11').css("width", 100 + '%')
        
      if (count % 5 == 0)
        $('.progress #dx11').css("width", (count / json[0].data.length) * 100 + '%')
        
      if ((json[0].data.length - 1) == count){
        // $('.progress .progress-bar').css("width", (json[0].data.length / count) * 100  + '%')
        
        clearInterval(addPointInterval)
        fpschart.options.scales.xAxes[0].ticks.min = 0
        fpschart.options.scales.xAxes[0].ticks.max = count
      }
      if (count > tickAmount){
        if (json[0].data.length == count){
          fpschart.options.scales.xAxes[0].ticks.min = 0
          fpschart.options.scales.xAxes[0].ticks.max = count
        } else {
          fpschart.options.scales.xAxes[0].ticks.min = count - tickAmount
          fpschart.options.scales.xAxes[0].ticks.max = count - 1
          // var newArray = []
          // for (var x = (count - tickAmount); x < count; x++) {
          //   $.each(fpschart.data.datasets, function(i, val){
          //     newArray.push(fpschart.data.datasets[i].data[x])
          //   })
          //   fpschart.options.scales.yAxes[0].ticks.max = Math.round(Math.max.apply(Math,newArray) / 10) * 10 + 10
          //   fpschart.options.scales.yAxes[0].ticks.min = Math.round(Math.min.apply(Math,newArray) / 10) * 10 - 10
          //   fpschart.options.scales.yAxes[1].ticks.max = Math.round(Math.max.apply(Math,newArray) / 10) * 10 + 10
          //   fpschart.options.scales.yAxes[1].ticks.min = Math.round(Math.min.apply(Math,newArray) / 10) * 10 - 10
          // }
        }
      }
      fpschart.update()
      count += 1
    }
    addPointInterval = setInterval(function(){ addPoint(); }, 100);
  })
}
var fpschart = new Chart(document.getElementById("fpschart"), {
  type: 'line',
  gridLines: {
    display: false ,
    color: "#FFFFFF"
  },
  data: {
    labels: [],
    datasets: [
      <% require 'open-uri' %>
      <% json = JSON.load(open("http://localhost:3000/benches_games/" + benches_game_id.to_s + "/full_fps")) %>
      <% json.each do |series| %>
        {
          // lineTension: 0,
          data: [],
          label: "<%= series['name'] %>",
          borderColor: '<%= series['color'] %>',
          backgroundColor: '<%= series['color'] %>',
          fill: false,
          borderWidth: 2,
        },
      <% end %>
    ],
    borderWidth: 3
  },
  options: {
    title: {
      display: true,
      text: 'FPS',
      lineHeight: 3,
      position: 'top',
      padding: -10
    },
    tooltips: {
      enabled: false
    },
    elements: {
    point:{
        radius: 0
      },
    },
    scales: {
      xAxes: [{
        ticks: {
          display: false
        },
        gridLines: {
          color: 'white',
          lineWidth: 0
        }
      }],
      yAxes: [{
        position: 'right',
        ticks: {
          stepSize: 20,
          min: <%= (BenchesGame.find(benches_game_id).inputs.minimum(:fps) * 1).round(-1) + 20%>,
          max: <%= (BenchesGame.find(benches_game_id).inputs.maximum(:fps) * 1).round(-1) %>,
        },
        gridLines: {
          color: 'white',
          lineWidth: 1
        }
      },{
        position: 'left',
        ticks: {
          display: false,
          stepSize: 20,
          min: <%= (BenchesGame.find(benches_game_id).inputs.minimum(:fps) * 1).round(-1) + 20%>,
          max: <%= (BenchesGame.find(benches_game_id).inputs.maximum(:fps) * 1).round(-1) %>,
        },
        gridLines: {
          color: 'white',
          lineWidth: 1
        }
      }
      ]
  },
  }
})

</script>